{"ast":null,"code":"import axios from 'axios';\n\n// import PlaceAutocomplete from './PlaceAutocomplete.vue';\n\n/* eslint-disable */\nexport default {\n  mounted() {\n    this.findLocations();\n    const autocomplete = new google.maps.places.Autocomplete(this.$refs[\"add\"], {\n      bounds: new google.maps.LatLngBounds(new google.maps.LatLng(1.3521, 103.8198))\n    });\n    autocomplete.addListener('place_changed', () => {\n      const place = autocomplete.getPlace();\n      const lat = place.geometry.location.lat();\n      const lng = place.geometry.location.lng();\n      this.lat = lat;\n      this.lng = lng;\n    });\n  },\n  data() {\n    return {\n      type: \"restaurant\",\n      radius: \"1\",\n      lat: 0,\n      lng: 0,\n      places: [],\n      mapDisplay: false,\n      search: \"\",\n      showToast: true\n    };\n  },\n  computed: {\n    coordinates() {\n      return `${this.lat}, ${this.lng}`;\n    }\n  },\n  methods: {\n    findLocations() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.lat = position.coords.latitude;\n        this.lng = position.coords.longitude;\n      }, error => {\n        console.log(\"Error getting location\");\n      });\n    },\n    findNearby() {\n      const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\n      this.showToast = true;\n      axios.get(URL).then(response => {\n        this.places = response.data.results;\n        this.addLocationsToGoogleMaps();\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    addLocationsToGoogleMaps() {\n      var map = new google.maps.Map(this.$refs[\"map\"], {\n        zoom: 17,\n        center: new google.maps.LatLng(this.lat, this.lng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      this.mapDisplay = true;\n      var infowindow = new google.maps.InfoWindow();\n      this.places.forEach(place => {\n        const lat = place.geometry.location.lat;\n        const lng = place.geometry.location.lng;\n        let marker = new google.maps.Marker({\n          position: new google.maps.LatLng(lat, lng),\n          map: map\n        });\n        google.maps.event.addListener(marker, \"click\", () => {\n          infowindow.setContent(`<div class=\"ui header\">${place.name}</div>\n                        <p>${place.vicinity}</p>`);\n          infowindow.open(map, marker);\n        });\n      });\n    }\n  },\n  watch: {\n    coordinates() {\n      this.findNearby();\n    },\n    lat() {\n      this.findNearby();\n    },\n    lng() {\n      this.findNearby();\n    },\n    mapDisplay() {\n      this.showToast = false;\n      this.mapDisplay = false;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mounted","findLocations","autocomplete","google","maps","places","Autocomplete","$refs","bounds","LatLngBounds","LatLng","addListener","place","getPlace","lat","geometry","location","lng","data","type","radius","mapDisplay","search","showToast","computed","coordinates","methods","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","log","findNearby","URL","get","then","response","results","addLocationsToGoogleMaps","catch","message","map","Map","zoom","center","mapTypeId","MapTypeId","ROADMAP","infowindow","InfoWindow","forEach","marker","Marker","event","setContent","name","vicinity","open","watch"],"sourceRoot":"","sources":["C:\\Users\\Dell\\Documents\\GitHub\\wad2test1\\src\\components\\NearbyPlaces.vue"],"sourcesContent":["<template>\r\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"/>\r\n    \r\n    <transition name=\"toastmotion\">\r\n        <div class=\"toast-wrap\" v-if=\"showToast\">\r\n            <div class=\"toastnotif\">\r\n                loading...\r\n            </div>\r\n        </div>\r\n    </transition>\r\n\r\n    <div class=\"ui grid\">\r\n        <div class=\"six wide column\">\r\n            <form class=\"ui segment large form\">\r\n                <div class=\"field\">\r\n                    <div class=\"ui right icon input large\">\r\n                        <input type=\"text\" placeholder=\"Enter a place\" ref=\"add\"/>\r\n                        <i class=\"search link icon\" @click=\"findNearby\"></i>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\">\r\n                    <div class=\"two fields\">\r\n                        <div class=\"field\">\r\n                            <select v-model=\"type\">\r\n                                <option value=\"restaurant\" selected>Restaurants</option>\r\n                                <option value=\"bar\">Bars</option>\r\n                                <option value=\"activities\">Activities</option>\r\n                            </select>\r\n                        </div>\r\n\r\n\r\n                        <div class=\"field\">\r\n                            <select v-model=\"radius\">\r\n                                <option value=\"1\" selected>1 KM</option>\r\n                                <option value=\"2\">2 KM</option>\r\n                                <option value=\"3\">3 KM</option>\r\n                                <option value=\"4\">4 KM</option>\r\n                                <option value=\"5\">5 KM</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button class=\"ui button pink\" @click=\"findNearby\">Find Locations</button>\r\n            </form>\r\n\r\n            <div class=\"ui segment\" style=\"max-height: 500px; overflow:scroll\">\r\n                <div class=\"ui divided items\">\r\n                    <div class=\"item\" v-for=\"place in places\" :key=\"place.id\">\r\n                        <div class=\"content\">\r\n                            <div class=\"header\">{{place.name}}</div>\r\n                            <div class=\"meta\">{{place.vicinity}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"ten wide column segment ui\" ref=\"map\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script> \r\nimport axios from 'axios';\r\n\r\n// import PlaceAutocomplete from './PlaceAutocomplete.vue';\r\n\r\n\r\n\r\n\r\n/* eslint-disable */\r\nexport default {\r\n    mounted() {\r\n        this.findLocations();\r\n\r\n        const autocomplete = new google.maps.places.Autocomplete(this.$refs[\"add\"],\r\n        {\r\n            bounds: new google.maps.LatLngBounds(\r\n                new google.maps.LatLng(1.3521, 103.8198)\r\n            ),\r\n        });\r\n\r\n        \r\n        autocomplete.addListener('place_changed', () => {\r\n            const place = autocomplete.getPlace();\r\n            const lat = place.geometry.location.lat();\r\n            const lng = place.geometry.location.lng();\r\n            this.lat = lat;\r\n            this.lng = lng;\r\n            \r\n        });\r\n    },\r\n    data() {\r\n        return {\r\n            type: \"restaurant\",\r\n            radius: \"1\",\r\n            lat: 0,\r\n            lng: 0,\r\n            places: [],\r\n            mapDisplay: false,\r\n            search: \"\",\r\n            showToast: true,\r\n        };\r\n    },\r\n    computed: {\r\n        coordinates() {\r\n            return `${this.lat}, ${this.lng}`;\r\n        }\r\n    },\r\n    methods: {\r\n        findLocations() {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.lat = position.coords.latitude;\r\n                this.lng = position.coords.longitude;\r\n            }, error => {\r\n                console.log(\"Error getting location\");\r\n            });\r\n        },\r\n        findNearby() {\r\n            const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\r\n            this.showToast = true;\r\n            axios.get(URL)\r\n                .then(response => {\r\n                this.places = response.data.results;\r\n                this.addLocationsToGoogleMaps();\r\n                \r\n            })\r\n                .catch(error => {\r\n                console.log(error.message);\r\n            });\r\n        },\r\n        addLocationsToGoogleMaps() {\r\n            var map = new google.maps.Map(this.$refs[\"map\"], {\r\n                zoom: 17,\r\n                center: new google.maps.LatLng(this.lat, this.lng),\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n            });\r\n\r\n            this.mapDisplay = true;\r\n            \r\n            \r\n            var infowindow = new google.maps.InfoWindow();\r\n            this.places.forEach(place => {\r\n                const lat = place.geometry.location.lat;\r\n                const lng = place.geometry.location.lng;\r\n                let marker = new google.maps.Marker({\r\n                    position: new google.maps.LatLng(lat, lng),\r\n                    map: map\r\n                });\r\n                google.maps.event.addListener(marker, \"click\", () => {\r\n                    infowindow.setContent(`<div class=\"ui header\">${place.name}</div>\r\n                        <p>${place.vicinity}</p>`);\r\n                    infowindow.open(map, marker);\r\n                });\r\n            });\r\n\r\n            \r\n        }\r\n    },\r\n    watch:{\r\n        coordinates() {\r\n            this.findNearby();\r\n        },\r\n        lat() {\r\n            this.findNearby();\r\n        },\r\n        lng() {\r\n            this.findNearby();\r\n        },\r\n        mapDisplay() {\r\n            this.showToast = false;\r\n            this.mapDisplay = false;\r\n        } \r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  .toast-wrap {\r\n        position: fixed;\r\n        width: 100%;\r\n        top: 20px;\r\n        z-index: 99999999;\r\n    }\r\n    .toastnotif {\r\n        padding: 20px;\r\n        color: white;\r\n        background: #ff0062;\r\n        border-radius: 10px;\r\n        box-shadow: 1px 3px 5px rgba(0,0,0,0.2);\r\n        max-width: 400px;\r\n        margin: 0 auto;\r\n        z-index: 99999999;\r\n    }\r\n    .toastmotion-enter-from {\r\n        opacity: 0;\r\n        transform: translateY(-60px);\r\n    }\r\n\r\n    .toastmotion-enter-to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n\r\n    .toastmotion-enter-active {\r\n        transition: all 0.3s ease;\r\n    }\r\n\r\n    .toastmotion-leave-from {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n\r\n    .toastmotion-leave-to {\r\n        opacity: 0;\r\n        transform: translateY(-60px);\r\n    }\r\n\r\n    .toastmotion-leave-active {\r\n        transition: all 0.3s ease;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module"}