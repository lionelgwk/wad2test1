{"ast":null,"code":"import axios from 'axios';\n\n// import PlaceAutocomplete from './PlaceAutocomplete.vue';\n\n/* eslint-disable */\nexport default {\n  mounted() {\n    const autoComplete = new google.maps.places.Autocomplete(this.$refs[\"add\"], {\n      bounds: new google.maps.LatLngBounds(new google.maps.LatLng(1.3521, 103.8198))\n    });\n\n    // autoComplete.addListener('place_changed', () => {\n    //     const place = autoComplete.getPlace();\n    //     const lat = place.geometry.location.lat();\n    //     const lng = place.geometry.location.lng();\n    //     document.getElementById('coords').value = `${lat}, ${lng}`;\n    // });\n  },\n\n  data() {\n    return {\n      type: \"restaurant\",\n      radius: \"1\",\n      lat: 0,\n      lng: 0,\n      places: [],\n      mapDisplay: false,\n      search: \"\",\n      add: \"\",\n      showToast: true\n    };\n  },\n  computed: {\n    coordinates() {\n      return `${this.lat}, ${this.lng}`;\n    }\n  },\n  methods: {\n    findLocations() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.lat = position.coords.latitude;\n        this.lng = position.coords.longitude;\n      }, error => {\n        console.log(\"Error getting location\");\n      });\n    },\n    findNearby() {\n      const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\n      this.showToast = true;\n      axios.get(URL).then(response => {\n        this.places = response.data.results;\n        this.addLocationsToGoogleMaps();\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    addLocationsToGoogleMaps() {\n      var map = new google.maps.Map(this.$refs[\"map\"], {\n        zoom: 17,\n        center: new google.maps.LatLng(this.lat, this.lng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      this.mapDisplay = true;\n      var infowindow = new google.maps.InfoWindow();\n      this.places.forEach(place => {\n        const lat = place.geometry.location.lat;\n        const lng = place.geometry.location.lng;\n        let marker = new google.maps.Marker({\n          position: new google.maps.LatLng(lat, lng),\n          map: map\n        });\n        google.maps.event.addListener(marker, \"click\", () => {\n          infowindow.setContent(`<div class=\"ui header\">${place.name}</div>\n                        <p>${place.vicinity}</p>`);\n          infowindow.open(map, marker);\n        });\n      });\n    }\n  },\n  mounted() {\n    this.findLocations();\n  },\n  watch: {\n    coordinates() {\n      this.findNearby();\n    },\n    mapDisplay() {\n      this.showToast = false;\n      this.mapDisplay = false;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mounted","autoComplete","google","maps","places","Autocomplete","$refs","bounds","LatLngBounds","LatLng","data","type","radius","lat","lng","mapDisplay","search","add","showToast","computed","coordinates","methods","findLocations","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","log","findNearby","URL","get","then","response","results","addLocationsToGoogleMaps","catch","message","map","Map","zoom","center","mapTypeId","MapTypeId","ROADMAP","infowindow","InfoWindow","forEach","place","geometry","location","marker","Marker","event","addListener","setContent","name","vicinity","open","watch"],"sourceRoot":"","sources":["/Users/lionel/Documents/GitHub/wad2test1/src/components/NearbyPlaces.vue"],"sourcesContent":["<template>\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"/>\n    \n    <transition name=\"toastmotion\">\n        <div class=\"toast-wrap\" v-if=\"showToast\">\n            <div class=\"toastnotif\">\n                loading...\n            </div>\n        </div>\n    </transition>\n\n    <div class=\"ui grid\">\n        <div class=\"six wide column\">\n            <form class=\"ui segment large form\">\n                <div class=\"field\">\n                    <div class=\"ui right icon input large\">\n                        <input type=\"text\" ref=\"latLngRef\" placeholder=\"Search for a place\" v-model=\"coords\" @change=\"findNearby\">\n                        <input type=\"text\" ref=\"add\" placeholder=\"Enter a place\"/>\n                        <i class=\"search link icon\" @click=\"findNearby\"></i>\n                    </div>\n                </div>\n\n                <div class=\"field\">\n                    <div class=\"two fields\">\n                        <div class=\"field\">\n                            <select v-model=\"type\">\n                                <option value=\"restaurant\" selected>Restaurants</option>\n                                <option value=\"bar\">Bars</option>\n                                <option value=\"activities\">Activities</option>\n                            </select>\n                        </div>\n\n\n                        <div class=\"field\">\n                            <select v-model=\"radius\">\n                                <option value=\"1\" selected>1 KM</option>\n                                <option value=\"2\">2 KM</option>\n                                <option value=\"3\">3 KM</option>\n                                <option value=\"4\">4 KM</option>\n                                <option value=\"5\">5 KM</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <button class=\"ui button pink\" @click=\"findNearby\">Find Locations</button>\n            </form>\n\n            <div class=\"ui segment\" style=\"max-height: 500px; overflow:scroll\">\n                <div class=\"ui divided items\">\n                    <div class=\"item\" v-for=\"place in places\" :key=\"place.id\">\n                        <div class=\"content\">\n                            <div class=\"header\">{{place.name}}</div>\n                            <div class=\"meta\">{{place.vicinity}}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"ten wide column segment ui\" ref=\"map\">\n        </div>\n    </div>\n</template>\n\n<script> \nimport axios from 'axios';\n\n// import PlaceAutocomplete from './PlaceAutocomplete.vue';\n\n\n\n\n/* eslint-disable */\nexport default {\n    mounted() {\n        const autoComplete = new google.maps.places.Autocomplete(this.$refs[\"add\"],\n        {\n            bounds: new google.maps.LatLngBounds(\n                new google.maps.LatLng(1.3521, 103.8198)\n            ),\n        });\n\n        // autoComplete.addListener('place_changed', () => {\n        //     const place = autoComplete.getPlace();\n        //     const lat = place.geometry.location.lat();\n        //     const lng = place.geometry.location.lng();\n        //     document.getElementById('coords').value = `${lat}, ${lng}`;\n        // });\n    },\n    data() {\n        return {\n            type: \"restaurant\",\n            radius: \"1\",\n            lat: 0,\n            lng: 0,\n            places: [],\n            mapDisplay: false,\n            search: \"\",\n            add: \"\",\n            showToast: true,\n        };\n    },\n    computed: {\n        coordinates() {\n            return `${this.lat}, ${this.lng}`;\n        }\n    },\n    methods: {\n        findLocations() {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.lat = position.coords.latitude;\n                this.lng = position.coords.longitude;\n            }, error => {\n                console.log(\"Error getting location\");\n            });\n        },\n        findNearby() {\n            const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\n            this.showToast = true;\n            axios.get(URL)\n                .then(response => {\n                this.places = response.data.results;\n                this.addLocationsToGoogleMaps();\n                \n            })\n                .catch(error => {\n                console.log(error.message);\n            });\n        },\n        addLocationsToGoogleMaps() {\n            var map = new google.maps.Map(this.$refs[\"map\"], {\n                zoom: 17,\n                center: new google.maps.LatLng(this.lat, this.lng),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n            });\n\n            this.mapDisplay = true;\n            \n            \n            var infowindow = new google.maps.InfoWindow();\n            this.places.forEach(place => {\n                const lat = place.geometry.location.lat;\n                const lng = place.geometry.location.lng;\n                let marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(lat, lng),\n                    map: map\n                });\n                google.maps.event.addListener(marker, \"click\", () => {\n                    infowindow.setContent(`<div class=\"ui header\">${place.name}</div>\n                        <p>${place.vicinity}</p>`);\n                    infowindow.open(map, marker);\n                });\n            });\n\n            \n        }\n    },\n    mounted() {\n        this.findLocations();\n    },\n    watch:{\n        coordinates() {\n            this.findNearby();\n        },\n        mapDisplay() {\n            this.showToast = false;\n            this.mapDisplay = false;\n        } \n    },\n}\n</script>\n\n<style scoped>\n  .toast-wrap {\n        position: fixed;\n        width: 100%;\n        top: 20px;\n        z-index: 99999999;\n    }\n    .toastnotif {\n        padding: 20px;\n        color: white;\n        background: #ff0062;\n        border-radius: 10px;\n        box-shadow: 1px 3px 5px rgba(0,0,0,0.2);\n        max-width: 400px;\n        margin: 0 auto;\n        z-index: 99999999;\n    }\n    .toastmotion-enter-from {\n        opacity: 0;\n        transform: translateY(-60px);\n    }\n\n    .toastmotion-enter-to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    .toastmotion-enter-active {\n        transition: all 0.3s ease;\n    }\n\n    .toastmotion-leave-from {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    .toastmotion-leave-to {\n        opacity: 0;\n        transform: translateY(-60px);\n    }\n\n    .toastmotion-leave-active {\n        transition: all 0.3s ease;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}