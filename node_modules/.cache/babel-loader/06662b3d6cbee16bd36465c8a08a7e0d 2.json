{"ast":null,"code":"// import { objectExpression } from \"@babel/types\";\nimport { ref, onMounted, loadMapMarkers } from \"vue\";\nexport default {\n  name: \"GMap\",\n  props: {\n    center: {\n      lat: Number,\n      lng: Number\n    },\n    zoom: Number,\n    mapType: String,\n    disableUI: Boolean,\n    markers: Array\n  },\n  setup(props) {\n    //the google map object\n    const map = ref(null);\n\n    //the map element in the template \n    const mapDivRef = ref(null);\n\n    //load in the google script \n    onMounted(() => {\n      //key is in the .env file\n\n      //create the script\n      const googleMapScript = document.createElement(\"SCRIPT\");\n      googleMapScript.setAttribute(\"src\", `https://maps.googleapis.com/maps/api/js?key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4&callback=initMap`);\n      googleMapScript.setAttribute(\"defer\", \"\");\n      googleMapScript.setAttribute(\"async\", \"\");\n      document.head.appendChild(googleMapScript);\n    });\n\n    //this function is claled as soon as the map is initialised\n    window.initMap = () => {\n      map.value = new window.google.maps.Map(mapDivRef.value, {\n        mapTypeId: props.mapType || 'hybrid',\n        zoom: props.zoom || 8,\n        disableDefaultUI: props.disableUI || false,\n        center: props.center || {\n          lat: 38.8977859,\n          lng: -77.0057621\n        }\n      });\n      loadMapMarkers();\n    };\n    const loadMapMarkers = () => {\n      if (!props.markers.length) return;\n      props.markers.forEach(markerInfo => {\n        //puts marker on the map\n        const mapMarker = new window.google.maps.Marker({\n          position: new window.google.maps.LatLng(markerInfo.lat, markerInfo.lng),\n          map: map.value,\n          title: markerInfo.title\n        });\n\n        //info window\n        mapMarker.infoWindow = new window.google.maps.InfoWindow({\n          content: markerInfo.title\n        });\n        mapMarker.addListener('click', () => {\n          if (mapMarker.title !== null) {\n            mapMarker.infoWindow.open(map.value);\n          }\n        });\n      });\n    };\n    return {\n      mapDivRef\n    };\n  }\n};","map":{"version":3,"mappings":"AAOA;AACA,SAASA,GAAG,EAAEC,SAAS,EAAEC,cAAa,QAAS,KAAK;AAEpD,eAAe;EACXC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE;IACHC,MAAM,EAAE;MAAEC,GAAG,EAAEC,MAAM;MAAEC,GAAG,EAAED;IAAO,CAAC;IACpCE,IAAI,EAAEF,MAAM;IACZG,OAAO,EAAEC,MAAM;IACfC,SAAS,EAAEC,OAAO;IAClBC,OAAO,EAAEC;EACb,CAAC;EACDC,KAAK,CAACZ,KAAK,EAAE;IACT;IACA,MAAMa,GAAE,GAAIjB,GAAG,CAAC,IAAI,CAAC;;IAErB;IACA,MAAMkB,SAAQ,GAAIlB,GAAG,CAAC,IAAI,CAAC;;IAE3B;IACAC,SAAS,CAAC,MAAM;MACZ;;MAEA;MACA,MAAMkB,eAAc,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACxDF,eAAe,CAACG,YAAY,CAAC,KAAK,EAAG,sGAAqG,CAAC;MAC3IH,eAAe,CAACG,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;MACzCH,eAAe,CAACG,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;MACzCF,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,eAAe,CAAC;IAE9C,CAAC,CAAC;;IAEF;IACAM,MAAM,CAACC,OAAM,GAAI,MAAM;MACnBT,GAAG,CAACU,KAAI,GAAI,IAAIF,MAAM,CAACG,MAAM,CAACC,IAAI,CAACC,GAAG,CAACZ,SAAS,CAACS,KAAK,EAAE;QAACI,SAAS,EAAE3B,KAAK,CAACM,OAAM,IAAK,QAAQ;QAAED,IAAI,EAAEL,KAAK,CAACK,IAAG,IAAK,CAAC;QAAEuB,gBAAgB,EAAE5B,KAAK,CAACQ,SAAQ,IAAK,KAAK;QAAEP,MAAM,EAAED,KAAK,CAACC,MAAK,IAAK;UAACC,GAAG,EAAC,UAAU;UAAEE,GAAG,EAAC,CAAC;QAAU;MAC1N,CAAC,CAAC;MACFN,cAAc,EAAE;IACpB,CAAC;IACD,MAAMA,cAAa,GAAI,MAAM;MACzB,IAAI,CAACE,KAAK,CAACU,OAAO,CAACmB,MAAM,EAAE;MAE3B7B,KAAK,CAACU,OAAO,CAACoB,OAAO,CAACC,UAAS,IAAK;QAEhC;QACA,MAAMC,SAAQ,GAAI,IAAIX,MAAM,CAACG,MAAM,CAACC,IAAI,CAACQ,MAAM,CAAE;UAC7CC,QAAO,EAAI,IAAIb,MAAM,CAACG,MAAM,CAACC,IAAI,CAACU,MAAM,CAACJ,UAAU,CAAC7B,GAAG,EAAE6B,UAAU,CAAC3B,GAAG,CAAC;UAExES,GAAG,EAACA,GAAG,CAACU,KAAK;UACba,KAAK,EAAEL,UAAU,CAACK;QACtB,CAAC,CAAC;;QAEF;QACAJ,SAAS,CAACK,UAAS,GAAI,IAAIhB,MAAM,CAACG,MAAM,CAACC,IAAI,CAACa,UAAU,CAAC;UACrDC,OAAM,EAAIR,UAAU,CAACK;QACzB,CAAC,CAAC;QAEFJ,SAAS,CAACQ,WAAW,CAAC,OAAO,EAAE,MAAM;UACjC,IAAKR,SAAS,CAACI,KAAI,KAAM,IAAG,EAAI;YAC5BJ,SAAS,CAACK,UAAU,CAACI,IAAI,CAAC5B,GAAG,CAACU,KAAK;UACvC;QACJ,CAAC,CAAC;MACN,CAAC;IACL;IAEA,OAAO;MACHT;IACJ;EACJ;AAEJ","names":["ref","onMounted","loadMapMarkers","name","props","center","lat","Number","lng","zoom","mapType","String","disableUI","Boolean","markers","Array","setup","map","mapDivRef","googleMapScript","document","createElement","setAttribute","head","appendChild","window","initMap","value","google","maps","Map","mapTypeId","disableDefaultUI","length","forEach","markerInfo","mapMarker","Marker","position","LatLng","title","infoWindow","InfoWindow","content","addListener","open"],"sourceRoot":"","sources":["/Users/caitlinyap/Documents/GitHub/wad2test1/src/components/GMap.vue"],"sourcesContent":["<template>\n    <div class=\"map\" ref=\"mapDivRef\">\n\n    </div>\n</template>\n\n<script>\n// import { objectExpression } from \"@babel/types\";\nimport { ref, onMounted, loadMapMarkers } from \"vue\";\n\nexport default {\n    name: \"GMap\", \n    props: {\n        center: { lat: Number, lng: Number },\n        zoom: Number,\n        mapType: String,\n        disableUI: Boolean,\n        markers: Array\n    },\n    setup(props) {\n        //the google map object\n        const map = ref(null);\n\n        //the map element in the template \n        const mapDivRef = ref(null);\n\n        //load in the google script \n        onMounted(() => {\n            //key is in the .env file\n\n            //create the script\n            const googleMapScript = document.createElement(\"SCRIPT\");\n            googleMapScript.setAttribute(\"src\", `https://maps.googleapis.com/maps/api/js?key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4&callback=initMap`);\n            googleMapScript.setAttribute(\"defer\", \"\");\n            googleMapScript.setAttribute(\"async\", \"\");\n            document.head.appendChild(googleMapScript);\n\n        });\n\n        //this function is claled as soon as the map is initialised\n        window.initMap = () => {\n            map.value = new window.google.maps.Map(mapDivRef.value, {mapTypeId: props.mapType || 'hybrid', zoom: props.zoom || 8, disableDefaultUI: props.disableUI || false, center: props.center || {lat:38.8977859, lng:-77.0057621}\n            });\n            loadMapMarkers();\n        };\n        const loadMapMarkers = () => {\n            if (!props.markers.length) return; \n\n            props.markers.forEach(markerInfo => {\n\n                //puts marker on the map\n                const mapMarker = new window.google.maps.Marker( {\n                    position : new window.google.maps.LatLng(markerInfo.lat, markerInfo.lng),\n\n                    map:map.value,\n                    title: markerInfo.title\n                });\n\n                //info window\n                mapMarker.infoWindow = new window.google.maps.InfoWindow({\n                    content : markerInfo.title\n                });\n\n                mapMarker.addListener('click', () => {\n                    if ( mapMarker.title !== null ) {\n                        mapMarker.infoWindow.open(map.value)\n                    }\n                });\n            })\n        }\n\n        return {\n            mapDivRef\n        }\n    }\n \n}\n</script>\n\n<style lang=\"css\" scoped>\n.map {\n    width:100%;\n    height:300px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}