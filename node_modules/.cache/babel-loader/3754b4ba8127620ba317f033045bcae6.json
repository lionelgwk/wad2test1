{"ast":null,"code":"import axios from 'axios';\n/* eslint-disable */\nexport default {\n  data() {\n    return {\n      type: \"\",\n      radius: \"\",\n      lat: 0,\n      lng: 0,\n      places: []\n    };\n  },\n  computed: {\n    coordinates() {\n      return `${this.lat}, ${this.lng}`;\n    }\n  },\n  methods: {\n    findLocations() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.lat = position.coords.latitude;\n        this.lng = position.coords.longitude;\n      }, error => {\n        console.log(\"Error getting location\");\n      });\n    },\n    findNearby() {\n      const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\n      console.log(URL);\n      axios.get(URL).then(response => {\n        this.places = response.data.results;\n        this.addLocationsToGoogleMaps();\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    addLocationsToGoogleMaps() {\n      var map = new google.maps.Map(this.$refs[\"map\"], {\n        zoom: 15,\n        center: new google.maps.LatLng(this.lat, this.lng),\n        mapTypeId: google.maps.MapTypeId.ROADMAO\n      });\n      this.places.forEach(place => {\n        const lat = place.geometry.location.lat;\n        const lng = place.geometry.location.lng;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAuDA,OAAOA,KAAI,MAAO,OAAO;AACzB;AACA,eAAe;EACXC,IAAI,GAAG;IACH,OAAO;MACHC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE,EAAE;MACVC,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,QAAQ,EAAC;IACLC,WAAW,GAAE;MACT,OAAQ,GAAE,IAAI,CAACJ,GAAI,KAAI,IAAI,CAACC,GAAI,EAAC;IACrC;EACJ,CAAC;EACDI,OAAO,EAAE;IACLC,aAAa,GAAG;MACZC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACpCC,QAAO,IAAK;QACR,IAAI,CAACV,GAAE,GAAIU,QAAQ,CAACC,MAAM,CAACC,QAAQ;QACnC,IAAI,CAACX,GAAE,GAAIS,QAAQ,CAACC,MAAM,CAACE,SAAS;MACxC,CAAC,EACDC,KAAI,IAAK;QACLC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACzC,EACH;IACL,CAAC;IACDC,UAAU,GAAE;MACR,MAAMC,GAAE,GAAK,yEAAwE,IAAI,CAAClB,GAAI,IAAG,IAAI,CAACC,GAAI,SAAQ,IAAI,CAACH,IAAK,WAAU,IAAI,CAACC,MAAK,GAAI,IAAK,8CAA6C;MACtMgB,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MAChBtB,KAAK,CAACuB,GAAG,CAACD,GAAG,EACRE,IAAI,CAACC,QAAO,IAAK;QACd,IAAI,CAACnB,MAAK,GAAImB,QAAQ,CAACxB,IAAI,CAACyB,OAAO;QACnC,IAAI,CAACC,wBAAwB,EAAE;MACnC,CAAC,EACAC,KAAK,CAAEV,KAAI,IAAK;QACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACW,OAAO,CAAC;MAC9B,CAAC,CAAC;IACV,CAAC;IACDF,wBAAwB,GAAE;MACtB,IAAIG,GAAE,GAAI,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC,KAAK,CAAC,EAAC;QAC5CC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE,IAAIL,MAAM,CAACC,IAAI,CAACK,MAAM,CAAC,IAAI,CAACjC,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;QAClDiC,SAAS,EAAEP,MAAM,CAACC,IAAI,CAACO,SAAS,CAACC;MACrC,CAAC,CAAC;MAEF,IAAI,CAAClC,MAAM,CAACmC,OAAO,CAACC,KAAI,IAAK;QACzB,MAAMtC,GAAE,GAAIsC,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAACxC,GAAG;QACvC,MAAMC,GAAE,GAAIqC,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAACvC,GAAG;MAC3C,CAAC;IACL;EACJ;AACJ","names":["axios","data","type","radius","lat","lng","places","computed","coordinates","methods","findLocations","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","log","findNearby","URL","get","then","response","results","addLocationsToGoogleMaps","catch","message","map","google","maps","Map","$refs","zoom","center","LatLng","mapTypeId","MapTypeId","ROADMAO","forEach","place","geometry","location"],"sourceRoot":"","sources":["/Users/lionel/Documents/GitHub/wad2test1/src/components/NearbyPlaces.vue"],"sourcesContent":["<template>\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"/>\n    <div class=\"ui grid\">\n        <div class=\"six wide column\">\n            <form class=\"ui segment large form\">\n                <div class=\"field\">\n                    <div class=\"ui right icon input large\">\n                        <input type=\"text\" placeholder=\"Search for a place\" v-model=\"coordinates\">\n                        <i class=\"search link icon\" @click=\"findLocations\"></i>\n                    </div>\n                </div>\n\n                <div class=\"field\">\n                    <div class=\"two fields\">\n                        <div class=\"field\">\n                            <select v-model=\"type\">\n                                <option value=\"restaurant\" selected>Restaurants</option>\n                                <option value=\"bar\">Bars</option>\n                            </select>\n                        </div>\n\n\n                        <div class=\"field\">\n                            <select v-model=\"radius\">\n                                <option value=\"1\" selected>1 KM</option>\n                                <option value=\"2\">2 KM</option>\n                                <option value=\"3\">3 KM</option>\n                                <option value=\"4\">4 KM</option>\n                                <option value=\"5\">5 KM</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <button class=\"ui button pink\" @click=\"findNearby\">Find Locations</button>\n            </form>\n\n            <div class=\"ui segment\" style=\"max-height: 500px; overflow:scroll\">\n                <div class=\"ui divided items\">\n                    <div class=\"item\" v-for=\"place in places\" :key=\"place.id\">\n                        <div class=\"content\">\n                            <div class=\"header\">{{place.name}}</div>\n                            <div class=\"meta\">{{place.vicinity}}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"ten wide column segment ui\" ref=\"map\">\n        </div>\n    </div>\n</template>\n\n<script> \nimport axios from 'axios';\n/* eslint-disable */\nexport default {\n    data() {\n        return {\n            type: \"\",\n            radius: \"\",\n            lat: 0,\n            lng: 0,\n            places: []\n        }\n    },\n    computed:{\n        coordinates(){\n            return `${this.lat}, ${this.lng}`;\n        }\n    },\n    methods: {\n        findLocations() {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    this.lat = position.coords.latitude;\n                    this.lng = position.coords.longitude;\n                },\n                error => {\n                    console.log(\"Error getting location\");\n                }\n            );\n        },\n        findNearby(){\n            const URL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.lat},${this.lng}&type=${this.type}&radius=${this.radius * 1000}&key=AIzaSyCTHZllCldMYoM9ByF8AcxKPWvIuFJsTx4`;\n            console.log(URL);\n            axios.get(URL)\n                .then(response => {\n                    this.places = response.data.results;\n                    this.addLocationsToGoogleMaps();\n                })\n                .catch( error => {\n                    console.log(error.message);\n                });\n        },\n        addLocationsToGoogleMaps(){\n            var map = new google.maps.Map(this.$refs[\"map\"],{\n                zoom: 15,\n                center: new google.maps.LatLng(this.lat, this.lng),\n                mapTypeId: google.maps.MapTypeId.ROADMAO\n            });\n\n            this.places.forEach(place => {\n                const lat = place.geometry.location.lat;\n                const lng = place.geometry.location.lng;\n            })\n        }\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}